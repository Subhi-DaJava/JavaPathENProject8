buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.8")
    }
}
plugins {
    id 'java'
    id 'jacoco'
    id 'application'
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'

version = '1.0.0'
group = 'tourGuide'
mainClassName='tourGuide.Application'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'


    implementation 'org.javamoney:moneta:1.4.2'
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'

    implementation files('libs/gpsUtil.jar')
    implementation files('libs/RewardCentral.jar')
    implementation files('libs/TripPricer.jar')

    /*implementation fileTree(include: ['*.jar'], dir: 'libs')*/

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

jar {
    manifest {
        // This code adds the Main-Class attribute to the manifest property of the jar task.
        // add the required attribute when generating an archive(contain the Main-Class attribute in the MANIFEST.MF)for the application
        attributes("Main-Class": "tourGuide.Application")
    }
}